name: CI
on:
  push:
    branches: [main]
    tags: ['*']
  pull_request:
    branches: [main]
    types: [assigned, opened, synchronize, reopened] 
  workflow_dispatch:
    inputs:
      build_tag:
          description: 'Build tag'
          required: false
          type: string
          default: null
jobs:  
  build_api_aws:
    name: AWS - Build Go Api 
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-central-1
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
            role-duration-seconds: 1200
        - name: Login to ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Create short sha
          uses: benjlevesque/short-sha@v3.0
          id: short-sha
          with:
            length: 8
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./api
            push: ${{ github.event_name != 'pull_request' }}
            platforms: linux/amd64
            tags: ${{ secrets.AWS_ECR_SERVER }}/cpvt-api:${{ github.event_name == 'workflow_dispatch' && inputs.build_tag || github.ref_type == 'tag' && github.ref_name || steps.short-sha.outputs.sha }}
  build_api_azure:
    name: Azure - Build Go Api
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Login to ACR
          uses: docker/login-action@v3
          with:
            registry: ${{ secrets.ACR_SERVER }}
            username: ${{ secrets.ACR_USER_NAME }}
            password: ${{ secrets.ACR_PASSWORD }}
        - name: Create short sha
          uses: benjlevesque/short-sha@v3.0
          id: short-sha
          with:
            length: 8
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./api
            push: ${{ github.event_name != 'pull_request' }}
            platforms: linux/amd64
            tags: ${{ secrets.ACR_SERVER }}/cpvt-api:${{ github.event_name == 'workflow_dispatch' && inputs.build_tag || github.ref_type == 'tag' && github.ref_name || steps.short-sha.outputs.sha }}
  build_web:
    name: Azure - Build Svelte Web App
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Login to ACR
          uses: docker/login-action@v3
          with:
            registry: ${{ secrets.ACR_SERVER }}
            username: ${{ secrets.ACR_USER_NAME }}
            password: ${{ secrets.ACR_PASSWORD }}
        - name: Create short sha
          uses: benjlevesque/short-sha@v3.0
          id: short-sha
          with:
            length: 8
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./client-sk
            push: ${{ github.event_name != 'pull_request' }}
            platforms: linux/amd64
            build-args: |
              version_info=${{ github.event_name == 'workflow_dispatch' && inputs.build_tag || github.ref_type == 'tag' && github.ref_name || steps.short-sha.outputs.sha }}
              PUBLIC_API_BASE_URL=${{ vars.PUBLIC_API_BASE_URL }}
              PUBLIC_API_BASE_URL_WS=${{ vars.PUBLIC_API_BASE_URL_WS }}
            tags: ${{ secrets.ACR_SERVER }}/cpvt-web:${{ github.event_name == 'workflow_dispatch' && inputs.build_tag || github.ref_type == 'tag' && github.ref_name || steps.short-sha.outputs.sha }}
  test_inmemory:
    name: Run Tests - Go Api - In Memory
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    container: 
      image: golang:1.23-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v4
      - name: Install templ
        working-directory: api
        run: go install github.com/a-h/templ/cmd/templ@latest
      - name: Templ generate
        working-directory: api
        run: templ generate
      - name: Install dependencies
        working-directory: api
        run: go get .
      - name: Test
        working-directory: api
        run: go test -v ./...
        env:
          STORAGE: "inmemory"
  test_redis:
    name: Run Tests - Go Api - Redis
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    container: 
      image: golang:1.23-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v4
      - name: Install templ
        working-directory: api
        run: go install github.com/a-h/templ/cmd/templ@latest
      - name: Templ generate
        working-directory: api
        run: templ generate
      - name: Install dependencies
        working-directory: api
        run: go get .
      - name: Test
        working-directory: api
        run: go test -v ./...
        env:
          STORAGE: "redis"
  test_postgres:
    name: Run Tests - Go Api - PostgreSQL
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    container: 
      image: golang:1.23-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v4
      - name: Install templ
        working-directory: api
        run: go install github.com/a-h/templ/cmd/templ@latest
      - name: Templ generate
        working-directory: api
        run: templ generate
      - name: Install dependencies
        working-directory: api
        run: go get .
      - name: Test
        working-directory: api
        run: go test -v ./...
        env:
          STORAGE: "postgres"