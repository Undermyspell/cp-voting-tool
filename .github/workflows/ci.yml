name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [assigned, opened, synchronize, reopened] 
  workflow_dispatch:
  
jobs:   
  build_api:
    name: Build Go Api
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Login to ACR
          uses: docker/login-action@v3
          with:
            registry: ${{ secrets.ACR_SERVER }}
            username: ${{ secrets.ACR_USER_NAME }}
            password: ${{ secrets.ACR_PASSWORD }}
        - name: Create short sha
          uses: benjlevesque/short-sha@v3.0
          id: short-sha
          with:
            length: 8
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./api
            push: ${{ github.event_name != 'pull_request' }}
            platforms: linux/amd64
            tags: ${{ secrets.ACR_SERVER }}/cpvt-api:${{ steps.short-sha.outputs.sha }}
  build_web:
    name: Build Svelte Web App
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Login to ACR
          uses: docker/login-action@v3
          with:
            registry: ${{ secrets.ACR_SERVER }}
            username: ${{ secrets.ACR_USER_NAME }}
            password: ${{ secrets.ACR_PASSWORD }}
        - name: Create short sha
          uses: benjlevesque/short-sha@v3.0
          id: short-sha
          with:
            length: 8
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./client-sk
            push: ${{ github.event_name != 'pull_request' }}
            platforms: linux/amd64
            build-args: |
              version_info=${{ env.BUILDTAG }}
              PUBLIC_API_BASE_URL=${{ vars.PUBLIC_API_BASE_URL }}
            tags: ${{ secrets.ACR_SERVER }}/cpvt-web:${{ steps.short-sha.outputs.sha }}
  test_inmemory:
    name: Run Tests - Go Api - In Menory
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    container: 
      image: golang:1.22-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        working-directory: api
        run: go get .
      - name: Test
        working-directory: api
        run: go test -v ./...
        env:
          VOTING_STORAGE_IN_MEMORY: true
  test_redis:
    name: Run Tests - Go Api - Redis
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    container: 
      image: golang:1.22-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        working-directory: api
        run: go get .
      - name: Test
        working-directory: api
        run: go test -v ./...
        env:
          VOTING_STORAGE_IN_MEMORY: false
          REDIS_ENDPOINT_SECRET: ${{ secrets.REDIS_ENDPOINT }}
          REDIS_PASSWORD_SECRET: ${{ secrets.REDIS_PASSWORD }}