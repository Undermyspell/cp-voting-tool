package pages

import (
	"voting/bff/templates/components"
	voting_usecases "voting/voting/usecases"
)

templ Hello(questions []voting_usecases.QuestionDto) {
	<ul>
		for _, item := range questions {
			<li>{ item.Text } - { item.Creator }</li>
		}
	</ul>
}

templ Main(title string, message string, questions []voting_usecases.QuestionDto) {
	@templ.JSONScript("questions", questions)
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link href="/static/css/tailwind.css" rel="stylesheet"/>
			<link href="/static/test.css" rel="stylesheet"/>
			<style>
				body {
					font-family: Arial, sans-serif;
					margin: 0;
					padding: 0;
					height: 100vh;
					display: grid;
					grid-template-rows: 3rem 1fr;
					grid-template-areas: "header" "content"
				}
				.content {
					text-align: center;
					padding: 20px;
					border-radius: 8px;
					box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
					grid-area: content
				}
				.header {
					grid-area: header
				}
			</style>
			<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<script src="https://unpkg.com/centrifuge@5.0.1/dist/centrifuge.js"></script>
			<script src="https://unpkg.com/htmx.org@2.0.1" integrity="sha384-QWGpdj554B4ETpJJC9z+ZHJcA/i59TyjxEPXiiUgN2WmTyV5OEZWCD6gQhgkdpB/" crossorigin="anonymous"></script>
			<script type="text/javascript">
				document.addEventListener('alpine:init', () => {
						Alpine.store("questionData", {
							async init() {
								this.user = await (await fetch('/user')).json()
								initCentrifugo(this.user)
							},
							questions: JSON.parse(document.getElementById('questions').textContent),
							get sortedQuestions() {
								return this.questions.sort((a, b) => b.Votes - a.Votes)
							},
							user:  null,
							addQuestion(question) {
								this.questions.push(question)
							}
						})
				})

				const initCentrifugo = async(user) => {
					console.log("init centrifugo")

					const centrifuge = new Centrifuge("ws://localhost:3333/api/v1/connection/websocket", {
						token: user.Token
					});
					centrifuge.on('connecting', function (ctx) {
						console.log(`connecting: ${ctx.code}, ${ctx.reason}`);
					}).on('connected', function (ctx) {
						console.log(`connected over ${ctx.transport}`);
					}).on('disconnected', function (ctx) {
						console.log(`disconnected: ${ctx.code}, ${ctx.reason}`);
					}).on('message', function (msg) {
						console.log(`message: ${JSON.stringify(msg)}`);

						const data = JSON.parse(msg.data.Payload)
						const eventType = msg.data.EventType

						switch(eventType){
							case "start_session":
								
								break
							case "stop_session":
								
								break
							case "user_connected":
							case "user_disconnected":
								
								break
							case "new_question":
								Alpine.store('questionData').addQuestion(data)
							case "undo_upvote_question":
								
								break
							case "update_question":
								
								break
							case "delete_question":
								
								break
							case "answer_question":
								
								break
						}
					}).connect();
				}

				
				</script>
		</head>
		<body class="bg-[#606676]">
			<div class="header bg-[#CA8787] flex items-center px-10">
				<h3>Voting Tool with templ, htmx, alpine.js and golang</h3>
			</div>
			<div class="content rounded-md overflow-hidden">
				<button
					hx-get="/q/new"
					hx-target="body"
					hx-trigger="click"
					hx-swap="beforeend"
					class="bg-pink-600 p-4 border-4 border-blue-700"
					type="button"
				>Add new Question Modal</button>
				@components.QuestionListAlpine()
			</div>
		</body>
	</html>
}
