// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Modal(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style type=\"text/css\">\n             /***** MODAL DIALOG ****/\n\t\t#modal {\n\t\t\t/* Underlay covers entire screen. */\n\t\t\tposition: fixed;\n\t\t\ttop:0px;\n\t\t\tbottom: 0px;\n\t\t\tleft:0px;\n\t\t\tright:0px;\n\t\t\tbackground-color:rgba(0,0,0,0.5);\n\t\t\tz-index:1000;\n\n\t\t\t/* Flexbox centers the .modal-content vertically and horizontally */\n\t\t\tdisplay:flex;\n\t\t\tflex-direction:column;\n\t\t\talign-items:center;\n\t\t}\n\n\t\t#modal > .modal-underlay {\n\t\t\t/* underlay takes up the entire viewport. This is only\n\t\t\trequired if you want to click to dismiss the popup */\n\t\t\tposition: absolute;\n\t\t\tz-index: -1;\n\t\t\ttop:0px;\n\t\t\tbottom:0px;\n\t\t\tleft: 0px;\n\t\t\tright: 0px;\n\t\t}\n\n\t\t#modal > .modal-content {\n\t\t\t/* Position visible dialog near the top of the window */\n\t\t\tmargin-top:10vh;\n\n\t\t\t/* Sizing for visible dialog */\n\t\t\twidth:80%;\n\t\t\tmax-width:600px;\n\n\t\t\t/* Display properties for visible dialog*/\n\t\t\tborder:solid 1px #999;\n\t\t\tborder-radius:8px;\n\t\t\tbox-shadow: 0px 0px 20px 0px rgba(0,0,0,0.3);\n\t\t\tbackground-color:white;\n\t\t\tpadding:20px;\n\t\t}\n\n\t\t#modal.closing {\n\t\t\t/* Animate when closing */\n\t\t\tanimation-name: fadeOut;\n\t\t\tanimation-duration:500ms;\n\t\t\tanimation-timing-function: ease;\n\t\t}\n\n\t\t@keyframes fadeOut {\n\t\t\t0% {opacity: 1;}\n\t\t\t100% {opacity: 0;}\n\t\t}\n\n\t\t#modal.htmx-added {\n\t\t\topacity: 0;\n\t\t}\n\t\t#modal {\n\t\t\topacity: 1;\n\t\t\ttransition: opacity .5s ease-out;\n\t\t}\n\t\t#modal.htmx-swapping {\n\t\t\topacity: 0;\n\t\t\ttransition: opacity .5s ease-out;\n\t\t}\n\t</style><div id=\"modal\" x-data=\"{ closing: false }\" @close=\"closing=true;$el.classList.add(&#39;closing&#39;)\" @animationend=\"closing ? $el.remove() : &#39;&#39;\" tabindex=\"-1\" class=\"hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full\"><div class=\"relative p-4 w-full max-w-5xl max-h-full\"><!-- Modal content --><div class=\"relative bg-white rounded-lg shadow dark:bg-gray-700 p-5\"><!-- Modal header --><button @click=\"$dispatch(&#39;close&#39;)\" type=\"button\" class=\"absolute top-2 right-2 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\" data-modal-hide=\"default-modal\"><svg class=\"w-3 h-3\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\"></path></svg> <span class=\"sr-only\">Close modal</span></button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
