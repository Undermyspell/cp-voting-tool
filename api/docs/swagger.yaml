definitions:
  dtos.NewQuestionDto:
    properties:
      anonymous:
        type: boolean
      text:
        type: string
    required:
    - text
    type: object
  dtos.NewTestUserDto:
    properties:
      firstname:
        type: string
      lastname:
        type: string
    required:
    - firstname
    - lastname
    type: object
  dtos.QuestionDto:
    properties:
      anonymous:
        type: boolean
      answered:
        type: boolean
      creator:
        type: string
      id:
        type: string
      owned:
        type: boolean
      text:
        type: string
      voted:
        type: boolean
      votes:
        type: integer
    type: object
  dtos.UpdateQuestionDto:
    properties:
      anonymous:
        type: boolean
      id:
        type: string
      text:
        type: string
    required:
    - id
    - text
    type: object
info:
  contact: {}
  description: THE CP voting tool API in Go using Gin framework.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CP Voting tool api
  version: "1.0"
paths:
  /api/v1/question/answer/{id}:
    put:
      description: Answers a question of the current session
      parameters:
      - description: Id of question to answer
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - JWT: []
      summary: Answers a question
      tags:
      - Question
  /api/v1/question/delete/{id}:
    delete:
      description: Deletes an existing question of the current session, only owned
        questions can be updated
      parameters:
      - description: Id of question to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          schema:
            type: string
      security:
      - JWT: []
      summary: Deletes an existing question of the current session
      tags:
      - Question
  /api/v1/question/new:
    post:
      description: Adds a new question to the current session
      parameters:
      - description: Question JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/dtos.NewQuestionDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Adds a new question
      tags:
      - Question
  /api/v1/question/session:
    get:
      description: Gets the questions of the current session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.QuestionDto'
            type: array
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Gets the questions of the current session
      tags:
      - Question
  /api/v1/question/session/start:
    post:
      description: Starts a new questions session
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Starts a new questions session
      tags:
      - Question
  /api/v1/question/session/stop:
    post:
      description: Stops the current questions session
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - JWT: []
      summary: Stops the current questions session
      tags:
      - Question
  /api/v1/question/undovote/{id}:
    put:
      description: Undo the upvote of a question of the current session
      parameters:
      - description: Id of question to undo the vote
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - JWT: []
      summary: Undo the upvote for a question
      tags:
      - Question
  /api/v1/question/update:
    put:
      description: Updates an existing question of the current session, only owned
        questions can be updated
      parameters:
      - description: Question JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateQuestionDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - JWT: []
      summary: Updates an existing question of the current session
      tags:
      - Question
  /api/v1/question/upvote/{id}:
    put:
      description: Upvotes a question of the current session
      parameters:
      - description: Id of question to upvote
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - JWT: []
      summary: Upvotes a question
      tags:
      - Question
  /api/v1/user/test/admin:
    post:
      description: Gets a test user with admin role
      parameters:
      - description: User JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/dtos.NewTestUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      security:
      - JWT: []
      summary: Gets a test user with admin role
      tags:
      - User
  /api/v1/user/test/contributor:
    post:
      description: Gets a test user without role
      parameters:
      - description: User JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/dtos.NewTestUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      security:
      - JWT: []
      summary: Gets a test user without role
      tags:
      - User
  /api/v1/user/test/sessionadmin:
    post:
      description: Gets a test user with session admin role
      parameters:
      - description: User JSON
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/dtos.NewTestUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
      security:
      - JWT: []
      summary: Gets a test user with session admin role
      tags:
      - User
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
